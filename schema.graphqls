type Book {
  title: String!
  isbn: String
  id: ObjectId!
  authors: [AuthorBookConnection!]!
}

"""Date custom scalar type"""
scalar ObjectId

type BookAggregate {
  count: Int!
}

type BookPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

type BookEdgeType {
  node: Book!
  cursor: String!
}

type PaginatedBookConnection {
  aggregate: BookAggregate!
  pageInfo: BookPageInfo!
  edges: [BookEdgeType!]!
}

type Author {
  name: String!
  id: ObjectId!
  books(after: String, first: Int, before: String, last: Int): PaginatedBookConnection!
}

type AuthorBookConnection {
  id: ObjectId!
  roles: [String!]
  author: Author!
}

type BookSeriesConnection {
  id: ObjectId!
  serial: Float!
  book: Book!
}

type Series {
  title: String!
  id: ObjectId!
  books: [BookSeriesConnection!]!
}

type Query {
  author(id: ObjectId!): Author!
  book(id: ObjectId!): Book!
  series(id: ObjectId!): Series!
}

type Mutation {
  createAuthor(data: CreateAuthorInput!): Author!
  createBook(data: CreateBookInput!): Book!
  createSeries(data: CreateSeriesInput!): Series!
}

input CreateAuthorInput {
  name: String!
}

input CreateBookInput {
  title: String!
  isbn: String
  authors: [CreateBookAuthorsInput!]!
}

input CreateBookAuthorsInput {
  id: ObjectId!
  roles: [String!]
}

input CreateSeriesInput {
  title: String!
  books: [CreateSeriesBooksInput!]!
  relatedBooks: [ID!]
}

input CreateSeriesBooksInput {
  id: ObjectId!
  serial: Float!
}
